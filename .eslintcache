[{"C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\index.js":"1","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\App.js":"2","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Title.js":"3","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Button.js":"4","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Form.js":"5","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Selection.js":"6","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Quiz.js":"7","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\QuizImage.js":"8","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\QuestionBank.js":"9","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Purity.js":"10","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Quotes.js":"11"},{"size":125,"mtime":1608943548622,"results":"12","hashOfConfig":"13"},{"size":773,"mtime":1609303358474,"results":"14","hashOfConfig":"13"},{"size":1023,"mtime":1608960735955,"results":"15","hashOfConfig":"13"},{"size":360,"mtime":1608960764108,"results":"16","hashOfConfig":"13"},{"size":1913,"mtime":1609303666924,"results":"17","hashOfConfig":"13"},{"size":344,"mtime":1609220124222,"results":"18","hashOfConfig":"13"},{"size":3861,"mtime":1609303581942,"results":"19","hashOfConfig":"13"},{"size":669,"mtime":1609302227004,"results":"20","hashOfConfig":"13"},{"size":13165,"mtime":1609296581911,"results":"21","hashOfConfig":"13"},{"size":1748,"mtime":1609302060097,"results":"22","hashOfConfig":"13"},{"size":1175,"mtime":1609297271213,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"udnlgd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\index.js",[],["53","54"],"C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\App.js",[],"C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Title.js",["55"],"import {React, useRef} from 'react';\r\nimport Button from './Button';\r\nimport '../Styles/Title.css';\r\nimport Form from './Form';\r\n\r\n\r\n\r\n\r\nexport default function Title(props) {\r\n    const func = props.onClick;\r\n    const ref1 = useRef();\r\n    const ref2 = useRef();\r\n\r\n    const addProp = () => { \r\n        ref1.current.classList.add('title--span')\r\n        ref2.current.classList.add('title--span')}\r\n\r\n    const remProp = () => {\r\n        ref1.current.classList.remove('title--span')\r\n        ref2.current.classList.remove('title--span')}\r\n    \r\n    return (\r\n        <div className = \"main--title\">\r\n            <div className = \"title--item\">\r\n\r\n            <h1> The <span ref = {ref1} className = \"\">Br</span>eaking <span ref = {ref2} className = \"\">B</span>ad Quiz </h1>\r\n\r\n            </div>\r\n\r\n            <div className =\"title--item\">\r\n            <Button onMouseEnter = {addProp} onMouseLeave = {remProp} onClick = {func} className = \"title--item-btn\">Play</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Button.js",[],"C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Form.js",["56"],"import {React, useState, useEffect, useRef} from 'react'\r\nimport './../Styles/Form.css';\r\nimport Selection from './Selection';\r\nimport img from '../IMG/hes.png';\r\n\r\nconst form_types = {\r\n    \"title_form\" :\r\n     {  \r\n        question : false,\r\n        parentClass : \"width-30\",\r\n        class : \"select--difficulty\",\r\n        title : \"What Difficulty Would You like?\",\r\n        selections : {\r\n        option_1 : \"easy\",\r\n        option_2 : 'medium',\r\n        option_3 : \"hard\",\r\n        }\r\n    }\r\n}\r\n\r\nexport default function Form(props) {\r\n\r\n\r\n\r\n    const type = form_types[props.type];\r\n    const [selection, setSelection] = useState('');\r\n    const func = props.setMode(selection);\r\n    const domRef = useRef();\r\n    const [addClass, setAddClass] = useState('');\r\n\r\n\r\n    const renderDifficulty = Object.values(type.selections).map((el, i) => {\r\n        return (\r\n        <Selection text = {el} key ={i} id = {i} selection = {(option) => (setSelection(option))}></Selection>)})\r\n\r\n    // function cleanUp () {\r\n    //     addClass = \"hide\";\r\n    // }\r\n    useEffect(() => {\r\n        if (selection !== \"\"){\r\n            return () => {setAddClass('hide')}\r\n        }\r\n    })\r\n    // const renderQuestion = Object.values(type.selections).map((el, i) => {return (\r\n    //     <Selection text = {el} key ={i} id = {i} selection = {(option) => (setSelection(option))}></Selection>)});\r\n    // const updateInfo = (type) => {\r\n    //     let a = <div> WOW </div>\r\n    //     return a;  \r\n    // }\r\n    return (\r\n\r\n        <div ref = {domRef} className = {`main--form ${type.parentClass} ${addClass}`}>\r\n            <img alt = \"funny pic\" src = {img}></img>\r\n            <div className = \"form--item\">\r\n            <h1 className = \"form--title\"> {type.title}</h1>\r\n            <div className = {`${type.class}`}>\r\n                {renderDifficulty}\r\n            </div>\r\n            </div>\r\n        </div>)\r\n    \r\n\r\n}\r\n","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Selection.js",[],"C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Quiz.js",["57","58","59","60","61","62"],"import {React, useState, useEffect, useRef} from 'react'\r\nimport Selection from './Selection';\r\nimport '../Styles/Quiz.css';\r\nimport QuizImage from './QuizImage';\r\nimport questions from './QuestionBank';\r\nimport Purity from './Purity';\r\n\r\n\r\n\r\nexport default function Quiz(props) {\r\n\r\n    const [mode, setMode] = useState(props.mode);\r\n    const [score, setScore] = useState(0);\r\n    const [quesNum, setQuesNum] = useState(0);\r\n    const qBank = questions[mode];\r\n    \r\n    const mainRef = useRef();\r\n    const mainQuiz = useRef();\r\n    const list = [qBank.q1, qBank.q2, qBank.q3, qBank.q4, qBank.q5, qBank.q6, qBank.q7, qBank.q8, qBank.q9, qBank.q10, qBank.q11];\r\n    const qLength = list.length;\r\n    const [selection, setSelection] = useState(null);\r\n    const [selectionIndex, setSelectionIndex] = useState(null)\r\n    const [quesEnd, setQuesEnd] = useState(false);\r\n \r\n\r\n    function handleSelection(option,i) {\r\n        setSelection(option);\r\n        setSelectionIndex(i)\r\n    }\r\n    const selections = Object.values(list[quesNum].selections).map((el, i) => {\r\n        return (\r\n        <Selection text = {el} key ={i} id = {i} selection = {(option) => (handleSelection(option, i))}></Selection>)})\r\n    \r\n\r\n    //short for selection. Each selection is changed according to correct answer.\r\n    function sels(mainRef, correct){\r\n        const node = mainRef.current.children;\r\n        const wrongOnes = Object.values(node).filter(el => correct !== el.innerText);\r\n        const rightOne = Object.values(node).filter(el => correct === el.innerText);\r\n        wrongOnes.forEach(el => el.classList.add('wrong'));\r\n        wrongOnes.forEach(el => el.classList.remove('main--selection'));\r\n        rightOne[0].classList.add('right')\r\n        rightOne[0].classList.remove('main--selection')\r\n    }\r\n\r\n\r\n    // every node is selected for the cleanup function and state is refreshed.\r\n    function cleanupSels(mainRef, correct){\r\n        const node = mainRef.current.children;\r\n        Object.values(node).forEach((el) => {\r\n            if (el.classList.contains('right') || el.classList.contains('wrong')){\r\n                el.classList.remove('right');\r\n                el.classList.remove('wrong');\r\n                el.classList.add('main--selection');\r\n            }\r\n        })\r\n    }\r\nlet tym;\r\n    // if selection text is equal to correct answer. \r\n    useEffect(() => {\r\n        if (selection === list[quesNum].correct){\r\n            setScore(score + 1);\r\n        }\r\n        if (selection !== null){\r\n        setTimeout( () => {\r\n            if (quesNum < qLength){\r\n            setQuesNum(quesNum + 1);\r\n            }\r\n            else {\r\n            // mainQuiz.current.classList.add('hide')\r\n            setQuesEnd(false);\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n        sels(mainRef, list[quesNum].correct);\r\n    }, [selection])\r\n\r\n    const renderQuestion = (\r\n    <div ref = {mainQuiz} className = \"main--quiz\">\r\n        <div className = \"quiz--item img\"><QuizImage char_id = {list[quesNum].char_id}/></div>\r\n            <div className = \"quiz--item\">\r\n                <div className = \"quiz--title\">\r\n                    {list[quesNum].title}\r\n                </div>\r\n                <div className = \"quiz--content\" ref = {mainRef}>\r\n                    {selections}\r\n                </div>\r\n        </div>\r\n    </div>)\r\n\r\n    function mainCleanup(mainRef, mainQuiz, correct, tym){\r\n        cleanupSels(mainRef, correct);\r\n        if (quesNum == qLength - 1){\r\n            setQuesEnd(true)\r\n        }\r\n    }\r\n    const renderResult = (\r\n        <div> <h1> {score}  </h1></div>\r\n    )\r\n    useEffect(()=> {\r\n        return mainCleanup(mainRef, list[quesNum].correct, mainQuiz, tym)\r\n    }, [quesNum])\r\n\r\n    return (\r\n        <>\r\n        {!quesEnd && renderQuestion}\r\n        {quesEnd && <Purity score = {score}></Purity>}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\QuizImage.js",["63"],"import {React, useState, useEffect}  from 'react'\r\nimport axios from 'axios';\r\nimport '../Styles/Quiz.css';\r\n\r\n\r\n\r\nexport default function QuizImage(props) {\r\n    const id = props.char_id;\r\n    const [img, setImg] = useState(\"\");\r\n    useEffect(() => {\r\n        const getImg = async () => {\r\n            const res = await axios.get(`https://www.breakingbadapi.com/api/characters/${id}`)\r\n            // console.log(res.data[0].img)\r\n            setImg(res.data[0].img)\r\n        }\r\n    getImg()\r\n    }, [id])\r\n\r\n    const renderImage = img === \"\" ? <div> <h3> Loading.... </h3></div> : <img className = \"quiz--img\" src = {img}/>\r\n\r\n    return (<> {renderImage} </>)\r\n}\r\n","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\QuestionBank.js",[],"C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Purity.js",["64"],"import {React, useState, useEffect} from 'react'\r\nimport '../Styles/Purity.css';\r\nimport quotes from './Quotes';\r\n\r\n\r\nfunction getRandom () {\r\n    return Math.round(Math.random())\r\n}\r\nexport default function Purity(props) {\r\n\r\n    const score = props.score * 10;\r\n    const [level, setLevel] = useState('25%');\r\n    const [ready, setReady] = useState(false);\r\n\r\n    const getScore = () => {\r\n        if (score > 0 && score <= 30){\r\n            setLevel('25%'); \r\n        }\r\n        else if (score > 30 && score <= 60){\r\n            setLevel('50%');\r\n        }\r\n        else if (score > 60 && score <= 80){\r\n            setLevel('75%');\r\n        }\r\n        else{\r\n            setLevel('100%');\r\n        }\r\n        setReady(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getScore();\r\n    }, []);\r\n\r\n    const quote = quotes[level];\r\n    const qBank = [quote.q1, quote.q2];\r\n    const selected = qBank[getRandom()];\r\n\r\n    function pageRefresh () {\r\n        window.location.reload();\r\n    }\r\n    const renderPurity = (<div className = \"main--purity\">\r\n            <div className = \"purity--item title\"> You can make </div>\r\n            <div className = \"purity--item score\"> {score}% </div>\r\n            <div className = \"purity--item footer\"> pure Meth. </div>\r\n            <div className = \"purity--item final\"> \r\n                <div className = \"purity--item quote\"> \"{selected.quote}\"</div>\r\n                <div className = \"purity--item author\"> -{selected.author}</div>\r\n            </div>\r\n            <div className = \"purity--item button\">\r\n                <button onClick = {pageRefresh}> Try Again! </button>\r\n            </div>\r\n\r\n        </div>)\r\n    return (\r\n        <>\r\n        {ready ? renderPurity : null}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\61433\\Desktop\\WebDev\\breakingbadquiz\\src\\Components\\Quotes.js",[],["65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":4,"column":8,"nodeType":"73","messageId":"74","endLine":4,"endColumn":12},{"ruleId":"71","severity":1,"message":"75","line":27,"column":11,"nodeType":"73","messageId":"74","endLine":27,"endColumn":15},{"ruleId":"71","severity":1,"message":"76","line":12,"column":18,"nodeType":"73","messageId":"74","endLine":12,"endColumn":25},{"ruleId":"71","severity":1,"message":"77","line":22,"column":12,"nodeType":"73","messageId":"74","endLine":22,"endColumn":26},{"ruleId":"78","severity":1,"message":"79","line":77,"column":8,"nodeType":"80","endLine":77,"endColumn":19,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":94,"column":21,"nodeType":"84","messageId":"85","endLine":94,"endColumn":23},{"ruleId":"71","severity":1,"message":"86","line":98,"column":11,"nodeType":"73","messageId":"74","endLine":98,"endColumn":23},{"ruleId":"78","severity":1,"message":"87","line":103,"column":8,"nodeType":"80","endLine":103,"endColumn":17,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":19,"column":75,"nodeType":"91","endLine":19,"endColumn":117},{"ruleId":"78","severity":1,"message":"92","line":33,"column":8,"nodeType":"80","endLine":33,"endColumn":10,"suggestions":"93"},{"ruleId":"67","replacedBy":"94"},{"ruleId":"69","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'func' is assigned a value but never used.","'setMode' is assigned a value but never used.","'selectionIndex' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'list', 'qLength', 'quesNum', and 'score'. Either include them or remove the dependency array. You can also do a functional update 'setQuesNum(q => ...)' if you only need 'quesNum' in the 'setQuesNum' call.","ArrayExpression",["98"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'renderResult' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'list', 'mainCleanup', and 'tym'. Either include them or remove the dependency array.",["99"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getScore'. Either include it or remove the dependency array.",["100"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [list, qLength, quesNum, score, selection]",{"range":"107","text":"108"},"Update the dependencies array to be: [list, mainCleanup, quesNum, tym]",{"range":"109","text":"110"},"Update the dependencies array to be: [getScore]",{"range":"111","text":"112"},[2827,2838],"[list, qLength, quesNum, score, selection]",[3704,3713],"[list, mainCleanup, quesNum, tym]",[790,792],"[getScore]"]